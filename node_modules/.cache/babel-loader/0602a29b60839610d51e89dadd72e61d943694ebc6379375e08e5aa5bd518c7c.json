{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ester\\\\Desktop\\\\blog_dwec\\\\blog-dwec-master\\\\blog-dwec-master\\\\src\\\\Inicio.js\",\n  _s = $RefreshSig$();\n// import Navbar from \"./Navbar\";\n// Se puede meter el menú donde se quiera por ejemplo \nimport { useState, useEffect } from \"react\";\n// Importacion de blogList:\nimport BlogList from \"./BlogList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Inicio = () => {\n  _s();\n  // UseState puede aceptar arrays de objetos:\n  // Esto lo vamos a pasar con los props:\n  const [blogs, setBlogs] = useState([{\n    titulo: 'Mi nueva web',\n    body: 'texto para mostrar...',\n    autor: 'Joan',\n    id: 1\n  }, {\n    titulo: 'Fiesta de Blas',\n    body: 'mucho mas texto...',\n    autor: 'Pedro',\n    id: 2\n  }, {\n    titulo: 'Merienda',\n    body: 'mas comida...',\n    autor: 'Marta',\n    id: 3\n  }]);\n  const [nombre, setNombre] = useState('Pablo');\n\n  // Funcion para eliminar, la vamos a exportar con un props:\n  const handleEliminarBlog = id => {\n    // const [seHaBorradoBlog, setseHaBorradoBlog] = useState(true);\n\n    // CReem un nou array que inclou tot excepte l'id que\n    // el que li arriba per parametre\n    const nuevoBlog = blogs.filter(blog => blog.id !== id);\n\n    // Al actrualizar de nuevo la página se vuelven a mostrar\n    // porque no estan eliminados del array:\n    setBlogs(nuevoBlog);\n  };\n\n  // se le pasa por parametro una funcion anonima que se vuelve a renderizar\n  // cada vez que se pasa este componente. Cuidado con cambiar el estado\n  // del componente dentro del useEffect porque nos podriamos quedar\n  // atrapados en un bucle infinito.\n  useEffect(() => {\n    console.log(\"useEffect disparado\");\n    console.log(blogs);\n\n    // el array vacio de abajo le indica al useEffect que solo se renderice\n    // cuando se cargue el componente, si añadimos la variable nombre\n    // al array:\n  }, [nombre]);\n\n  // Props\n  // Props nos va peermitir pasar datos de un componente padre \n  // a otro componente hijo. El que cede la ifno es el padre, el que la recoge es el hijo\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home\",\n    children: [/*#__PURE__*/_jsxDEV(BlogList, {\n      blogs: blogs,\n      titulo: \"Listado de blogs\",\n      handleEliminarBlog: handleEliminarBlog\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: nombre\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setNombre('Pepito'),\n      children: \"Cambio de nombre\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n};\n_s(Inicio, \"BRlgBy1byYVk2DV3bkW28SRnNuU=\");\n_c = Inicio;\nexport default Inicio;\nvar _c;\n$RefreshReg$(_c, \"Inicio\");","map":{"version":3,"names":["useState","useEffect","BlogList","jsxDEV","_jsxDEV","Inicio","_s","blogs","setBlogs","titulo","body","autor","id","nombre","setNombre","handleEliminarBlog","nuevoBlog","filter","blog","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Ester/Desktop/blog_dwec/blog-dwec-master/blog-dwec-master/src/Inicio.js"],"sourcesContent":["// import Navbar from \"./Navbar\";\n// Se puede meter el menú donde se quiera por ejemplo \nimport { useState, useEffect } from \"react\";\n// Importacion de blogList:\nimport BlogList from \"./BlogList\";\n\nconst Inicio = () => {\n\n   \n    // UseState puede aceptar arrays de objetos:\n    // Esto lo vamos a pasar con los props:\n    const [blogs, setBlogs] = useState([\n        {titulo: 'Mi nueva web', body: 'texto para mostrar...',\n        autor: 'Joan', id: 1},\n        {titulo: 'Fiesta de Blas', body: 'mucho mas texto...',\n        autor: 'Pedro', id: 2},\n        {titulo: 'Merienda', body: 'mas comida...',\n        autor: 'Marta', id: 3}\n    ]);\n\n    const [nombre, setNombre] = useState('Pablo');\n\n    // Funcion para eliminar, la vamos a exportar con un props:\n    const handleEliminarBlog = (id) =>{\n\n        // const [seHaBorradoBlog, setseHaBorradoBlog] = useState(true);\n\n        // CReem un nou array que inclou tot excepte l'id que\n        // el que li arriba per parametre\n        const nuevoBlog = blogs.filter(blog => blog.id !== id);\n        \n        // Al actrualizar de nuevo la página se vuelven a mostrar\n        // porque no estan eliminados del array:\n        setBlogs(nuevoBlog);\n\n        \n    };\n\n    // se le pasa por parametro una funcion anonima que se vuelve a renderizar\n    // cada vez que se pasa este componente. Cuidado con cambiar el estado\n    // del componente dentro del useEffect porque nos podriamos quedar\n    // atrapados en un bucle infinito.\n    useEffect(()=>{\n        console.log(\"useEffect disparado\");\n        console.log(blogs);\n\n\n    // el array vacio de abajo le indica al useEffect que solo se renderice\n    // cuando se cargue el componente, si añadimos la variable nombre\n    // al array:\n    },[nombre]);\n\n    // Props\n    // Props nos va peermitir pasar datos de un componente padre \n    // a otro componente hijo. El que cede la ifno es el padre, el que la recoge es el hijo\n    return ( \n        <div className=\"home\">\n            {/* aqui pasamos props: lo primero el primer blogs\n            se pueden llamar como queramos, lo segundo sí que representa\n            la variable de la linea 12. Lo que hacemos aqui abajo es crear el prop*/}\n            <BlogList blogs = {blogs} titulo = \"Listado de blogs\" handleEliminarBlog = {handleEliminarBlog} />\n            <p>{nombre}</p>\n            <button onClick={()=>setNombre('Pepito')}>Cambio de nombre</button>\n            {/* Utilizar funciones como si fueran props */}\n\n            {/* filter() sirve para filtrarv elementos de un array\n            por una determinada característica que le decimos */}\n            {/* <BlogList blogs = {blogs.filter(blog => blog.autor === 'Joan')} titulo = \"Blogs de Joan\" />\n            <BlogList blogs = {blogs.filter(blog => blog.body === 'mas comida...')} titulo = \"Blogs de comida\" />\n            <BlogList blogs = {blogs.filter(blog => blog.id === 2)} titulo = \"Segundo blog\" /> */}\n        </div>     \n\n     );\n}\n \nexport default Inicio;"],"mappings":";;AAAA;AACA;AACA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C;AACA,OAAOC,QAAQ,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAGjB;EACA;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,CAC/B;IAACS,MAAM,EAAE,cAAc;IAAEC,IAAI,EAAE,uBAAuB;IACtDC,KAAK,EAAE,MAAM;IAAEC,EAAE,EAAE;EAAC,CAAC,EACrB;IAACH,MAAM,EAAE,gBAAgB;IAAEC,IAAI,EAAE,oBAAoB;IACrDC,KAAK,EAAE,OAAO;IAAEC,EAAE,EAAE;EAAC,CAAC,EACtB;IAACH,MAAM,EAAE,UAAU;IAAEC,IAAI,EAAE,eAAe;IAC1CC,KAAK,EAAE,OAAO;IAAEC,EAAE,EAAE;EAAC,CAAC,CACzB,CAAC;EAEF,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGd,QAAQ,CAAC,OAAO,CAAC;;EAE7C;EACA,MAAMe,kBAAkB,GAAIH,EAAE,IAAI;IAE9B;;IAEA;IACA;IACA,MAAMI,SAAS,GAAGT,KAAK,CAACU,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACN,EAAE,KAAKA,EAAE,CAAC;;IAEtD;IACA;IACAJ,QAAQ,CAACQ,SAAS,CAAC;EAGvB,CAAC;;EAED;EACA;EACA;EACA;EACAf,SAAS,CAAC,MAAI;IACVkB,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;IAClCD,OAAO,CAACC,GAAG,CAACb,KAAK,CAAC;;IAGtB;IACA;IACA;EACA,CAAC,EAAC,CAACM,MAAM,CAAC,CAAC;;EAEX;EACA;EACA;EACA,oBACIT,OAAA;IAAKiB,SAAS,EAAC,MAAM;IAAAC,QAAA,gBAIjBlB,OAAA,CAACF,QAAQ;MAACK,KAAK,EAAIA,KAAM;MAACE,MAAM,EAAG,kBAAkB;MAACM,kBAAkB,EAAIA;IAAmB;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAClGtB,OAAA;MAAAkB,QAAA,EAAIT;IAAM;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACftB,OAAA;MAAQuB,OAAO,EAAEA,CAAA,KAAIb,SAAS,CAAC,QAAQ,CAAE;MAAAQ,QAAA,EAAC;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAQlE,CAAC;AAGd,CAAC;AAAApB,EAAA,CAnEKD,MAAM;AAAAuB,EAAA,GAANvB,MAAM;AAqEZ,eAAeA,MAAM;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}